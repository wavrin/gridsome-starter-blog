{"hash":"81d2c9c1ee89c7bcd6d345f45b6bdebce4e4b08d","data":{"tag":{"title":"Vue.js","belongsTo":{"edges":[{"node":{"title":"Adding plugins to a Gridsome site","path":"/adding-plugins-to-a-gridsome-site/","date":"12. November 2019","timeToRead":3,"description":"The Gridsome community has a pretty strong set of plugins. But you aren't limited by just those. Incorporating a Vue.js component into your site isn't too hard either.","content":"<p><a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a> is a great static site generator, written in Vue.js, to host websites. I have <a href=\"https://www.wavrin.com/new-site-with-gridsome-and-amplify/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">written</a> before about why I chose Gridsome. I started this site with a great <a href=\"https://github.com/gridsome/gridsome-starter-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">starter template</a>, but wanted to add a few more features to it. Thankfully, the Gridsome community has a number of quality plugins to make this easy.</p>\n<p>There are three features I wanted:</p>\n<ul>\n<li>Google Analytics to track site visits</li>\n<li>A sitemap.xml to help crawlers index the site</li>\n<li>\n<p><a href=\"https://disqus.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Disqus</a> comments on each blog post</p>\n<p>The first two - Google Analytics and a sitemap generator - have official <a href=\"https://gridsome.org/plugins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome plugins</a>. But for Disqus comments I will have to do a tiny extra, using a Vue.js plugin instead. One quick note: I'm using <em>yarn</em> instead of <em>npm</em>, so that's what you'll see below. The plugin pages have instructions for npm if that's how you do things. :)\n</p>\n</li>\n</ul>\n<h3 id=\"google-analytics\"><a href=\"#google-analytics\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Google Analytics</h3>\n<p> The @gridsome/plugin-google-analytics <a href=\"https://gridsome.org/plugins/@gridsome/plugin-google-analytics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">page</a> makes this quite simple.</p>\n<p><code class=\"language-text\">yarn add @gridsome/plugin-google-analytics</code></p>\n<p> This adds the library to your <code class=\"language-text\">packages.json</code> file. Now you just need to copy/paste the code into your <code class=\"language-text\">gridsome.config.js</code> file.</p>\n<pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  plugins: [\n    {\n      use: &#39;@gridsome/plugin-google-analytics&#39;,\n      options: {\n        id: &#39;UA-XXXXXXXXX-X&#39;\n      }\n    }\n  ]\n}</code></pre>\n<p>Put your actual tracking ID in there and you are set. <code class=\"language-text\">gridsome build</code> is all you need before deploying this.</p>\n<h3 id=\"sitemap\"><a href=\"#sitemap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Sitemap</h3>\n<p>Following the instructions on the <a href=\"https://gridsome.org/plugins/@gridsome/plugin-sitemap\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@gridsome/plugin-sitemap page</a>: <code class=\"language-text\">yarn add @gridsome/plugin-sitemap</code></p>\n<p>You do need to make sure that your <code class=\"language-text\">gridsome.config.js</code> has a <code class=\"language-text\">siteUrl</code> set. The plugin example has some different configuration options, depending on your pages and url structure. Mine is pretty simple, as all I have are blog posts for the top directory. So my plugin code for my <code class=\"language-text\">gridsome.config.js</code> is:</p>\n<pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  plugins: [\n    {\n      use: &#39;@gridsome/plugin-sitemap&#39;,\n      options: {\n        cacheTime: 600000, // default\n        exclude: [&#39;/exclude-me&#39;],\n        config: {\n          &#39;/*&#39;: {\n            changefreq: &#39;weekly&#39;,\n            priority: 0.5\n          }\n        }\n      }\n    }\n  ]\n}</code></pre>\n<p>I left the \"exclude\" part in, even though I don't currently use it. After you build your site, your sitemap should be available at <code class=\"language-text\">/sitemap.xml</code> You may not see it locally, but <code class=\"language-text\">gridsome build</code> and deploy that, and you should see it in production.</p>\n<p>I would suggest using <a href=\"https://www.google.com/webmasters/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google Webmasters</a> to show Google exactly where your sitemap is. It will then tell you if you have any errors.</p>\n<h3 id=\"disqus-comments\"><a href=\"#disqus-comments\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Disqus Comments</h3>\n<p>This one's just a bit tricker because there is not an official Gridsome plugin. You will have to use the <a href=\"https://github.com/ktquez/vue-disqus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-disqus</a> component. Make sure to check the link for current instructions, but at this time:</p>\n<p><code class=\"language-text\">npm install vue-disqus</code> gets it into your <code class=\"language-text\">package.json</code> You will now need to install it in your Vue app. In your <code class=\"language-text\">main.js</code> you'll need to import it and then register it. Here is what my <code class=\"language-text\">main.js</code> looks like:</p>\n<pre class=\"language-text\"><code class=\"language-text\">import &#39;~/assets/style/index.scss&#39;\n\nimport DefaultLayout from &#39;~/layouts/Default.vue&#39;\n\nimport VueDisqus from &quot;vue-disqus&quot;;\n\nexport default function (Vue, { router, head, isClient }) {\n  Vue.component(&#39;Layout&#39;, DefaultLayout);\n  Vue.use(VueDisqus);\n}</code></pre>\n<p>Finally, if you are going to use comments like I do - underneath each blog post - you would put the following code in your template:</p>\n<pre class=\"language-text\"><code class=\"language-text\">  &lt;div class=&quot;comments&quot;&gt;\n    &lt;vue-disqus shortname=&quot;your_shortname_disqus&quot; :identifier=&quot;page_id&quot; url=&quot;http://example.com/path&quot;&gt;&lt;/vue-disqus&gt;\n  &lt;/div&gt;</code></pre>\n<p>Just add your short name from your Disqus account and the url of your site. And that's it.</p>\n<p>Check all your work locally with <code class=\"language-text\">gridsome develop</code>. Once you confirm it all looks good, build again: <code class=\"language-text\">gridsome build</code> and deploy.</p>\n"}},{"node":{"title":"New site with Gridsome and Amplify","path":"/new-site-with-gridsome-and-amplify/","date":"10. November 2019","timeToRead":2,"description":"I've lost count how many iterations this website has had. So, of course, I wanted to build another one.","content":"<p>I've lost count how many iterations this website has had. There was a simple HTML/CSS site; at least twice powered by Wordpress, once by Drupal. Then there was the Ruby on Rails version, and even one using Django. There was the shared hosting, the Digital Ocean droplet, and the experiments with various services at AWS. I can say, with certainty, that I enjoyed building each version.</p>\n<p>If I had always been focused on the content, then the smart thing would have been to just go with Wordpress and stick with it. But I've used this site as a playground to try new technologies. And so here we are again...</p>\n<p>This time around, there were two things I wanted to work with: Vue.js and some sort of hosting experience where I could serve static pages, without having to maintain a backend. This is where <a href=\"https://jamstack.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JAMstack</a> comes in.</p>\n<ul>\n<li><strong>J</strong>avascript: It will handle requests/responses from within the client.</li>\n<li><strong>A</strong>PIs: Any data requests use reusable APIs.</li>\n<li><strong>M</strong>arkdown: You write your content in markdown files, which will be pre-built at runtime.</li>\n</ul>\n<p>JAMstack encompasses several approaches. What I was really interested in is a static site generator. And it happens that many static site generators are considered JAMstack-worthy.</p>\n<p>In the Vue.js community there are a few options. Among them, <a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vuepress</a> and <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a>. I chose Gridsome because its documentation is amazing, it has a large plugin community, and many starter templates.</p>\n<p>With Gridsome installed locally, you can develop your site and build it - so it's ready to be deployed. To host my site, I used <a href=\"https://aws.amazon.com/amplify/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS Amplify</a>. Amplify is then pointed to my GitHub repository and as soon as I update it (like adding a new blog post), Amplify grabs the updated build and deploys. </p>\n<p>Is this the way of the future? Well, I'm not sure. But it's pretty slick for now. I have no server I need to maintain and pages are delivered blazingly fast. I'm writing my posts in Markdown, but not everyone's interested in doing that. There are other options, such as headless CMSs.</p>\n"}}]}}},"context":{}}